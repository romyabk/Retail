# -*- coding: utf-8 -*-
"""assignment-retail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EzFPVZYLN2_geTZJOjEu_BZqm8xorXGv

<img src="https://static.wincacademy.nl/logos/main-logo.png" height=200px style="height: 200px"/>

# Assignment: Retail

Congratulations! You've reached the final assignment for the course before the bonus modules. Here we'll ask you to work with a dataset from the Dutch *Centraal Bureau voor de Statistiek* (CBS, English: Statistics Netherlands). It contains monthly growth percentages for various branches of the retail sector. You'll be required to answer open questions as well as write code that handles the data and crunches numbers.

*Answer open questions as though you were writing a report. Answers that are too vague, too short or too sloppy will be rejected.*

## 0. Load required modules

First, we need to load some modules that we're going to use. Do that in the next code cell. If you don't know yet which modules you'll use, just read on and come back here to import them later. **Don't forget to run the cell whenever you make an edit!**
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install matplotlib --user > /dev/null 2>&1
!pip install numpy --user > /dev/null 2>&1
!pip install pandas --user > /dev/null 2>&1
!pip install tabulate --user > /dev/null 2>&1
!pip install prettytable --user > /dev/null 2>&1

# %matplotlib inline

import csv
import locale
import dateutil.parser
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
from tabulate import tabulate
import itertools
from prettytable import PrettyTable

"""## 1. Data Preparation
Now we need to load and parse the data. The data should be located in the same folder as this notebook (whether that's on Google Colab or your local machine). Make sure you have working file path from your notebook to the supplied `data.csv` file. Put an `x` in the checkbox below when you're ready.

- [x] *I have a working file path to the `data.csv` file.*

You are now ready to proceed with reading the data into your program.

### 1.1 Read the CSV

The data comes in the form of a `csv`-file. CSV stands for 'comma separated values'. Oddly enough it need not be the case that the values are *really* separated by commas. In this case, the **delimiter** - the character that separates the columns within a datapoint - is *not* a comma. It's up to you to inspect `data.csv` and find out what the delimiter is.

Once you know what the delimiter is, you can use Python's `csv` module to read each of the datapoints to a dictionary. Some tips:

- The module's name is `csv`.
- You can find its documentation [here](https://docs.python.org/3/library/csv.html)
- We suggest you use the `DictReader` class. There's an example on how to use `DictReader` in the linked documentation.
- Instead of printing the rows (like in the example), we suggest you store all the rows as `dict`s in a `list`.

**1. In the code cell below, write code that opens and reads the data. By the end of the cell, you should have a variable `data` that is a list of dictionaries that each contain a datapoint.**
"""

delimiter = ';'
data_loc = 'retail-data.csv'

with open(data_loc) as f:
    csv_reader = csv.DictReader(f, delimiter=delimiter)
    data = list(csv_reader)

print (data)

"""### 1.2 Parse and clean the data

You now have a list of dictionaries that each contain some data. But what data? Answer the following questions to become familiar with this dataset. It requires you to write and execute Python code (you can add code cells if you wish), and also search the web for terms you're not familiar with.

**2. What are the column names in this dataset, and what do they mean? Be specific.**

Bedrijfstakken/branches (SBI 2008); onder welke bedrijfstakken en branches vallen de bedrijven waarover de data gaat

"Perioden"; over welk jaar en welke maand gaat de data 

"Omzet ongecorrigeerd/Indexcijfers/Waarde (2015=100)"; wat is de index van de omzet in eurowaarde in de periode waarover de data gaat ten opzicht van 2015

"Omzet ongecorrigeerd/Indexcijfers/Volume (2015=100); wat is de index van de omzet in volume (aantal verkochte items) in de periode waarover de data gaat ten opzicht van 2015

**3. For each column, list what data type it should have (`str`, `int`, `float` or `datetime.date`).**

Bedrijfstakken/branches (SBI 2008); str

"Perioden"; datetime.date

"Omzet ongecorrigeerd/Indexcijfers/Waarde (2015=100)"; float

"Omzet ongecorrigeerd/Indexcijfers/Volume (2015=100); float
    
**4. In the code cell below, write code that changes the column names to something more convenient for writing readable code. Be sure to choose English, correct and meaningful names.**
"""

for dict_row in data:
    dict_row['Branches'] = dict_row.pop('Bedrijfstakken/branches (SBI 2008)')
    dict_row['Periods'] = dict_row.pop('Perioden')
    dict_row['Revenue_euro'] = dict_row.pop('Omzet ongecorrigeerd/Indexcijfers/Waarde (2015=100)')
    dict_row['Revenue_volume'] = dict_row.pop('Omzet ongecorrigeerd/Indexcijfers/Volume (2015=100)')

"""**5. In the code cell below, write code that casts all the data to the right type.**

Tips:
- If you overwite your data, running the casting operation you're about to implement more than once might result in errors. In that case you can opt not to reuse a variable or restart and rerun your notebook for every retry.
- The data is in Dutch. For some columns this does not matter, but for one in particular it makes parsing it a little bit harder. There is a way to handle this in a few lines of code. You'll need Python's `locale` module for this, as well as the special string `'nl_NL.UTF-8'`. If you're not sure how to use this information after searching the web for a while, it's OK to take the long way around and write custom code to handle the Dutch words.
- The parsing script is bound to run into errors. **Do not modify the data file on disk.** Carefully read the error, examine why it works on most values and crashes on some others, and apply a fix in your code! We'll give you some tips:
    - A handful of values in the `Perioden`-column might cause an error due to an unexpected character. You can safely ignore that character.
    - Handle missing numerical values by replacing them with `-1.`. Be sure to maintain the correct datatype for that column!
"""

date_format = '%Y %B'

for dict_row in data:
  try:
    dict_row['Revenue_euro'] = float(dict_row['Revenue_euro'].strip())
  except:
    dict_row['Revenue_euro'] = float(-1)

  try: 
    dict_row['Revenue_volume'] = float(dict_row['Revenue_volume'].strip())
  except:
    dict_row['Revenue_volume'] = float(-1)
  
  dict_row['Periods'] = dict_row['Periods'].strip(' *')
  if 'januari' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('januari','January')
  if 'februari' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('februari','February')
  if 'maart' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('maart','March')
  if 'april' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('april','April')
  if 'mei' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('mei','May')
  if 'juni' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('juni','June')
  if 'juli' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('juli','July')
  if 'augustus' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('augustus','August')
  if 'september' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('september','September')
  if 'oktober' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('oktober','October')
  if 'november' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('november','November')
  if 'december' in dict_row['Periods']:
    dict_row['Periods'] = dict_row['Periods'].replace('december','December')
  dict_row['Periods'] = datetime.strptime(dict_row['Periods'], date_format).date()

"""## 2. Data Exploration

You are now ready to explore the data.

**6. In the code cell below, print the following metadata. Format the printed text in a nice and tidy way. Put an `x` in the checkboxes when you've succeeded.**

- [x] **The number of datapoints in the dataset.**
- [x] **The number of unique branches of the retail sector the data covers.**
- [x] **The first month covered by the data.**
- [x] **The last month covered by the data.**
"""

from collections import defaultdict

print("The number of datapoints is: {}".format(len(data)))
print("The number of unique branches is: {}".format(len(set(d["Branches"] for d in data))))
print("The first month is: {}".format(sorted([d["Periods"] for d in data])[0].strftime("%Y %b")))
print("The last month is: {}".format(sorted([d["Periods"] for d in data])[-1].strftime("%Y %b")))

"""**7. In the code cell below, extract the revenue numbers for the following two sectors and put them in a list named exactly as indicated. Also create a list that contains all the months in ascending order. Run the cell after it to see a plot of the numbers if you did it correctly.**

- [x] Months in ascending order $\Longrightarrow$ `months`
- [x] Clothing stores $\Longrightarrow$  `clothing_stores_revenue`
    - Tip: the Dutch word for *'clothing'* is *'kleding'*
- [x] Mail order companies and web shops $\Longrightarrow$ `mail_order_revenue`
    - Tip: the Dutch term for *'mail order companies'* is *'postorderbedrijven'*
"""

months = sorted(set([d["Periods"] for d in data]))
clothing_stores_revenue = [d["Revenue_euro"] for d in data if "kleding" in d["Branches"]]
mail_order_revenue = [d["Revenue_euro"] for d in data if "Postorderbedrijven" in d["Branches"]]

print (months)
print (clothing_stores_revenue)
print (mail_order_revenue)

# Commented out IPython magic to ensure Python compatibility.
# Do not modify the code in this cell.
import matplotlib.pyplot as plt
# %matplotlib inline

try:
    fig, ax = plt.subplots(figsize=(16, 9))
    ax.plot(months, clothing_stores_revenue, label="Clothing stores' revenue")
    ax.plot(months, mail_order_revenue, label="Mail order companies' revenue")
    ax.set_xlabel('Date')
    ax.set_ylabel('Percent, 2015=100')
    ax.legend()
    plt.show()
except Exception as e:
    print('There was an error creating the plot.\n'
          'Check if your lists are correctly named and assembled.\n'
          "Here's your error, for your debugging pleasure.")
    raise e

"""**8. How do the two branches compare? Discuss any yearly cycles you observe, as well as long-term developments. Also explain why you think these patterns are there. Pretend you are writing this to your supervisor or a client who asked you to analyze this dataset.**

De kledingbranche laat elk jaar hetzelfde patroon zien. Echter neemt de index vanaf 2020 af, dit heeft waarschijnlijk te maken met de invloed van Corona. De maatregelen vanuit de overheid hebben negatief effect gehad om de omzet van kledingwinkels.

Ook de postordebedrijven laten een patroon zien, maar dat patroon wordt pas zichtaar vanaf 2014. Ook is vanaf toen de index enorm toegenomen. De stijging is deels te verklaren door Corona waardoor steeds meer mensen online zijn gaan bestellen, maar de trend was al ingezet voor Corona.

Bij kledingwinkels zie je twee keer per jaar een piek, bij de start van de zomer en bij de start van de winter. Deze zijn te verklaren doordat mensen op die momenten vaak nieuwe kleding kopen voor die seizoenen. Die kleding kunnen ze dan een half jaar dragen en dan hebben ze nieuwe kleding nodig die past bij de weersomstandigheden.

Bij postorderbedrijven zie je een keer per jaar een piek, namelijk aan het einde van het jaar. Dit is te verklaren doordat steeds meer mensen er voor kiezen om hun Sinterklaas en Kerst cadeaus online te bestellen waardoor ze de deur niet meer uit hoeven. Doordat in januari veel mensen bewust bezig zijn met geld en daardoor minder online bestellen zie je in januari de grootste daling.

## 3. Computing With Data

### 3.1 Year Over Year Change

Let's take a closer look at these two branches of retail: clothing stores and mail order companies. A commonly used metric in business is the year-over-year revenue change. It is computed like so:

$$\text{YoY}_\text{month} = \frac{\text{Revenue}_\text{month}}{\text{Revenue}_\text{same month last year}} \times 100$$

Search the web for a longer explanation of this term if you'd like one.

**9. Why should we compare revenue for a particular month to the revenue of that same month, one year ago?**

Omdat de omstandigheden in die maand vaak gelijk zijn. Sinterklaas en Kerst vallen bijvoorbeeld altijd in december en dan geven mensen meer geld uit aan cadeau's. In januari wordt er dan minder geld uit gegeven. Het is dan niet eerlijk om januari en december met elkaar te vergelijken. Daarom kun je beter december met december te vergelijken.
 
**10. In the code cell below, compute the year-over-year revenue change for every month, for both branches of the retail sector, each in their own new list. Skip the first year (why?). Put an `x` in the checkboxes when you're ready. Run the next cell to see a new plot for your data.**

- [ ] Clothing stores $\Longrightarrow$ `clothing_stores_yoy`
- [ ] Mail order companies $\Longrightarrow$ `mail_order_yoy`
"""

clothing_stores_yoy = []
mail_order_yoy = []

for x in range(len(clothing_stores_revenue[12:])):
    yoy_month_clothing = (clothing_stores_revenue[x+12]/clothing_stores_revenue[x])*100
    clothing_stores_yoy.append(yoy_month_clothing)
    yoy_month_mail = (mail_order_revenue[x+12]/mail_order_revenue[x])*100
    mail_order_yoy.append(yoy_month_mail)
print(clothing_stores_yoy) 
print(len(clothing_stores_yoy))
print(len(months))

try:
    fig, ax = plt.subplots(figsize=(16, 9))
    ax.plot(months[12:], clothing_stores_yoy, label="Clothing stores' YoY")
    ax.plot(months[12:], mail_order_yoy, label="Mail order companies' YoY")
    ax.set_xlabel('Date')
    ax.set_ylabel('YoY change, 2015=100')
    ax.legend()
    plt.show()
except Exception as e:
    print('There was an error creating the plot.\n'
          'Check if your lists are correctly named and assembled.\n'
          "Here's your error, for your debugging pleasure.")
    raise e

"""**11. In the code cell below, find the best and worst months for both branches of the retail sector in terms of year-over-year revenue change. Print the branch, month and YoY in a nice and tidy way.**"""

clothing_stores_max_yoy = max(clothing_stores_yoy)
clothing_stores_min_yoy = min(clothing_stores_yoy)
clothing_stores_max_yoy_month = months[clothing_stores_yoy.index(clothing_stores_max_yoy) + 12]
clothing_stores_min_yoy_month = months[clothing_stores_yoy.index(clothing_stores_min_yoy) + 12]

mail_order_max_yoy = max(mail_order_yoy)
mail_order_min_yoy = min(mail_order_yoy)
mail_order_max_yoy_month = months[mail_order_yoy.index(mail_order_max_yoy) + 12]
mail_order_min_yoy_month = months[mail_order_yoy.index(mail_order_min_yoy) + 12]

print('Clothing stores best period is', clothing_stores_max_yoy_month.strftime('%Y %B'), "with a YoY revenue change of {:.2f}%".format(clothing_stores_max_yoy))
print('Clothing stores worst period is', clothing_stores_min_yoy_month.strftime('%Y %B,'), "with a YoY revenue change of {:.2f}%".format(clothing_stores_min_yoy))
print('Mail order companies best period is', mail_order_max_yoy_month.strftime('%Y %B,'), "with a YoY revenue change of {:.2f}%".format(mail_order_max_yoy))
print('Mail order companies worst period is', mail_order_min_yoy_month.strftime('%Y %B,'), "with a YoY revenue changee of {:.2f}%".format(mail_order_min_yoy))

"""### 3.2 Similarity Between Branches

We've seen that the pattern for revenue is quite different for clothing stores and mail order companies. In other words: their revenues don't move up or down together. A way to make this observation more specific is to compute the **correlation coefficient**. It is a number between $-1$ and $1$ that describes the relation between two *random variables*. Here is how it works applied to our revenue numbers:

- If the correlation coefficient for the revenue of two branches of the retail sector is $1$, their revenue is *positively correlated*. This means that when the revenue of branch A goes up, the revenue of branch B also goes up. In other words: the revenues for both branches go up together.
- If the correlation coefficient is $-1$, the revenues of the two branches are *negatively correlated*. This means that if A's revenue goes up, B's revenue goes down. Similarly, if B's revenue goes up, A's revenue goes down. They move in the exact opposite direction.
- If the correlation coefficient is $0$, there is no clear pattern between the revenues of both branches.

Here's a table that summarizes this information:

| Correlation coefficient | Meaning                              |
|-------------------------|--------------------------------------|
| $1$                     | Revenues go up together              |
| $0$                     | No pattern                           |
| $-1$                    | Revenues move in opposite directions |

Note that there is a continuous scale between $-1$ and $1$! A correlation coefficient of $0.3$ indicates a somewhat positively correlated relationship.

And here's an image that visualizes the correlation coefficient.

<img src="https://upload.wikimedia.org/wikipedia/commons/d/d4/Correlation_examples2.svg"/>

We've provided a function `corrcoef` that computes the correlation coefficient for two lists.

**11. In the code cell below, use the function `corrcoef` to compute the correlation coefficient for each pair of branches in our dataset. Then print a sorted table that shows each unique pair and their correlation coefficients. You can take inspiration from this table (but it doesn't have to look exactly like it):**

```
Coeff   Branch A                                          Branch B                                          
===========================================================================================================
0.98    4711, 472 Winkels in voedingsmiddelen             4711 Supermarkten                                 
0.91    475 Winkels in overige huishoudwaren              4752 Winkels in doe-het-zelfartikelen             
0.91    47528 Bouwmarkten                                 4752 Winkels in doe-het-zelfartikelen               
```
"""

import numpy as np

# Provided function. Use this to obtain the correlation coefficient for two lists.
def corrcoef(branch_a, branch_b):
    return np.corrcoef(branch_a, branch_b)[0, 1]

def get_revenue(branch, data):
    revenue_list = [d["Revenue_euro"] for d in data if d["Branches"] == branch]
    return revenue_list

def pairwise(l):
    pair = [[p1, p2] for p1 in l for p2 in l if p1 != p2]
    return pair

table_list = []
branch_list = list(set(d["Branches"] for d in data))

for p in pairwise(branch_list):
    corr = corrcoef(get_revenue(p[0], data), get_revenue(p[1], data))
    table_list.append([round(corr, 2), p[0], p[1]])
print(tabulate(table_list, headers=["Coff", "Branch A", "Branch B"]))

"""**12. Pick two correlation coefficients from the table you created and explain why you think these values are the way that they are. Be sure to pick two coefficients that are not close to each other.**

-0.56  4765 Speelgoedwinkels                     4791 Postorderbedrijven, webwinkels --> Uit de cijfers blijkt dat Speelgoedwinkels het moeilijk hebben en Postorderbedrijven een enorme groei doormaken. Dit zou je kunnen verklaren doordat er steeds minder speelgoedwinkels zijn en dat er daardoor steeds meer speelgoed online wordt besteld en dat dat via postorderbedrijven wordt bezorgd.

 0.71  472 Winkels in voedingsmiddelen           474 Winkels in consumentenelektronica --> Uit de cijfers blijkt dat winkels in voedingsmiddelen en het beter doen dan winkels in consumentenelektronica. Voedingsmiddelen is een productcategorie waarvoor de meeste mensen nog fysiek naar de winkel gaan. Slechts een klein percentage mensen besteld voedingsmiddelen online alhoewel dit percentage wel steeds groter wordt, helemaal door Corona. Voor consumentenelektronice kan men wel naar de winkel gaan om het product een keer in handen te hebben gehad, maar men gaat daarna op internet op zoek naar de laagste prijs en besteld het daar in plaats van dat men het koopt in de winkel.

**13. Imagine you are a very risk-averse investor shaping your portfolio of investments in the retail sector. How would you use the information in the table you created to minimize your investment risk? Which two branches of the retail sector would you invest in if you had to pick two? Use the correlation coefficient in your answer.**

Ik zou investeren in 4711 Supermarkten en 4752 Winkels in doe-het-zelfartikelen. Deze hebben namelijk de kleinste negatieve correlatie coefficient. Het effect van een eventuele daling in de ene sector is dan minimaal voor de andere. Hierdoor loopt je het minste risico. Hoe hoger de correlatie coefficient hoe groter het risico.

## 4. Conclusion

You made it! This was the Retail assignment. Before you hand it in: restart the kernel and run all the cells. Then save it to GitHub and share the link with us in the usual way.
"""